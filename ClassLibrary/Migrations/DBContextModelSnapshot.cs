// <auto-generated />
using System;
using ClassLibrary.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassLibrary.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassLibrary.Models.AvailableStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Available_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Unavailable"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Under Maintenance"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Power Tools"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cameras"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Construction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Event Supplies"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.ConditionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Condition_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "New"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Good"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Damaged"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Refurbished"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varbinary(50)");

                    b.Property<DateTime>("UploadeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ClassLibrary.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Document_Type");
                });

            modelBuilder.Entity("ClassLibrary.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableId")
                        .HasColumnType("int")
                        .HasColumnName("Available_ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("AvailableId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("ClassLibrary.Models.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK_Table2");

                    b.HasIndex("Equipment");

                    b.HasIndex("UserId");

                    b.ToTable("FeedBack");
                });

            modelBuilder.Entity("ClassLibrary.Models.FeedBack1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ClassLibrary.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AffectedData")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("ClassLibrary.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationTypeID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ClassLibrary.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Notification_Type");
                });

            modelBuilder.Entity("ClassLibrary.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Payment_Status");
                });

            modelBuilder.Entity("ClassLibrary.Models.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableId")
                        .HasColumnType("int")
                        .HasColumnName("Available_ID");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("Condition_ID");

                    b.HasKey("Id");

                    b.ToTable("Product_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 5,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 6,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 7,
                            AvailableId = 1,
                            ConditionId = 1
                        },
                        new
                        {
                            Id = 8,
                            AvailableId = 1,
                            ConditionId = 1
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.RentalRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("Equipment_ID");

                    b.Property<int>("RentalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RentalStatus");

                    b.HasIndex("UserId");

                    b.ToTable("Rental_Request");
                });

            modelBuilder.Entity("ClassLibrary.Models.RentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Rental_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 6,
                            Status = "Returned"
                        },
                        new
                        {
                            Id = 7,
                            Status = "Overdue"
                        },
                        new
                        {
                            Id = 8,
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.RentalTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Period")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("Pickup")
                        .HasColumnType("datetime");

                    b.Property<int>("RentalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PaymentStatus");

                    b.HasIndex("RentalStatus");

                    b.HasIndex("UserId");

                    b.ToTable("Rental_Transaction");
                });

            modelBuilder.Entity("ClassLibrary.Models.ReturnRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<int>("Equipment")
                        .HasColumnType("int");

                    b.Property<decimal?>("LateFees")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Condition");

                    b.HasIndex("Equipment");

                    b.ToTable("Return_Record");
                });

            modelBuilder.Entity("ClassLibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User_Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Role = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Document", b =>
                {
                    b.HasOne("ClassLibrary.Models.DocumentType", "DocumentTypeNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentType")
                        .IsRequired()
                        .HasConstraintName("FK_Document_Document_Type");

                    b.HasOne("ClassLibrary.Models.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_User");

                    b.Navigation("DocumentTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Equipment", b =>
                {
                    b.HasOne("ClassLibrary.Models.AvailableStatus", "Available")
                        .WithMany("Equipment")
                        .HasForeignKey("AvailableId")
                        .IsRequired()
                        .HasConstraintName("FK_Equipment_Available_Status");

                    b.HasOne("ClassLibrary.Models.Category", "Category")
                        .WithMany("Equipment")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Equipment_Category");

                    b.HasOne("ClassLibrary.Models.ConditionStatus", "Condition")
                        .WithMany("Equipment")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("FK_Equipment_Condition_Status");

                    b.Navigation("Available");

                    b.Navigation("Category");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("ClassLibrary.Models.FeedBack", b =>
                {
                    b.HasOne("ClassLibrary.Models.Equipment", "EquipmentNavigation")
                        .WithMany("FeedBacks")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_FeedBack_Equipment");

                    b.HasOne("ClassLibrary.Models.User", "User")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FeedBack_User");

                    b.Navigation("EquipmentNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Log", b =>
                {
                    b.HasOne("ClassLibrary.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Log_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Notification", b =>
                {
                    b.HasOne("ClassLibrary.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Notification_Type");

                    b.HasOne("ClassLibrary.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.RentalRequest", b =>
                {
                    b.HasOne("ClassLibrary.Models.Equipment", "Equipment")
                        .WithMany("RentalRequests")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Rental_Request_Equipment");

                    b.HasOne("ClassLibrary.Models.ProductStatus", "RentalStatusNavigation")
                        .WithMany("RentalRequests")
                        .HasForeignKey("RentalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Rental_Request_Product_Status");

                    b.HasOne("ClassLibrary.Models.RentalStatus", "RentalStatus1")
                        .WithMany("RentalRequests")
                        .HasForeignKey("RentalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Rental_Request_Rental_Status");

                    b.HasOne("ClassLibrary.Models.User", "User")
                        .WithMany("RentalRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("RentalStatus1");

                    b.Navigation("RentalStatusNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.RentalTransaction", b =>
                {
                    b.HasOne("ClassLibrary.Models.PaymentStatus", "PaymentStatusNavigation")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("PaymentStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Rental_Transaction_Payment_Status");

                    b.HasOne("ClassLibrary.Models.RentalStatus", "RentalStatusNavigation")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("RentalStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Rental_Transaction_Rental_Status");

                    b.HasOne("ClassLibrary.Models.User", "User")
                        .WithMany("RentalTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rental_Transaction_User");

                    b.Navigation("PaymentStatusNavigation");

                    b.Navigation("RentalStatusNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.ReturnRecord", b =>
                {
                    b.HasOne("ClassLibrary.Models.ConditionStatus", "ConditionNavigation")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("Condition")
                        .IsRequired()
                        .HasConstraintName("FK_Return_Record_Condition_Status");

                    b.HasOne("ClassLibrary.Models.Equipment", "EquipmentNavigation")
                        .WithMany("ReturnRecords")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_Return_Record_Equipment");

                    b.Navigation("ConditionNavigation");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("ClassLibrary.Models.User", b =>
                {
                    b.HasOne("ClassLibrary.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ClassLibrary.Models.AvailableStatus", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ClassLibrary.Models.Category", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ClassLibrary.Models.ConditionStatus", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("ClassLibrary.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ClassLibrary.Models.Equipment", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("RentalRequests");

                    b.Navigation("ReturnRecords");
                });

            modelBuilder.Entity("ClassLibrary.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ClassLibrary.Models.PaymentStatus", b =>
                {
                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("ClassLibrary.Models.ProductStatus", b =>
                {
                    b.Navigation("RentalRequests");
                });

            modelBuilder.Entity("ClassLibrary.Models.RentalStatus", b =>
                {
                    b.Navigation("RentalRequests");

                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("ClassLibrary.Models.User", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("FeedBacks");

                    b.Navigation("Logs");

                    b.Navigation("Notifications");

                    b.Navigation("RentalRequests");

                    b.Navigation("RentalTransactions");
                });

            modelBuilder.Entity("ClassLibrary.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
